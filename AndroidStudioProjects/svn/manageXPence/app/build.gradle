apply plugin: 'com.android.application'

android {
    compileSdkVersion 26


    defaultConfig {
        applicationId "uk.co.irokottaki.moneycontrol"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 43
        versionName "6.8"

        // Enabling multidex support.
        multiDexEnabled true
        testInstrumentationRunner = 'android.support.test.runner.AndroidJUnitRunner'

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled = true
        }
    }
    lintOptions {
        checkReleaseBuilds false
        //Or, if you prefer, you can continue to check for errors in release builds
        //but continue the build even when errors are found:
        abortOnError false
        disable 'InvalidPackage'
    }
    useLibrary 'org.apache.http.legacy'

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    implementation group: 'org.jacoco', name: 'org.jacoco.agent',version: '0.7.9'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation files('libs/mpandroidchartlibrary-2-1-5.jar')
    implementation project(':mm-ad-sdk')
    implementation files('libs/itextpdf-5.5.9.jar')
    implementation 'com.android.support:appcompat-v7:23.4.0'
    implementation 'com.android.support:support-v4:23.4.0'
    implementation 'com.google.android.gms:play-services:9.2.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.0-beta1'
    implementation 'com.android.support:multidex:1.0.0'

    implementation 'com.havenondemand:hodclient:2.1'
    implementation 'com.havenondemand:hodresponseparser:2.1'

    implementation 'com.dropbox.core:dropbox-core-sdk:2.0.1'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.android.support.test:monitor:1.0.2'
    implementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation "org.robolectric:multidex:3.4.2"
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:2.2.1"
    testImplementation 'org.robolectric:shadows-support-v4:3.0'
    androidTestImplementation('com.schibsted.spain:barista:2.7.0') {
        exclude group: 'com.android.support'

    }

    configurations.all {
        resolutionStrategy.force 'com.android.support:support-annotations:23.4.0'
        resolutionStrategy.force 'org.hamcrest:hamcrest-core:1.3'
    }

}

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-26/android.jar," +

        "${project.buildDir}/intermediates/app_classes/debug/packageAppClassesDebug/classes.jar"
        property "sonar.projectName", "ManageXpence"
        property "sonar.projectKey", "uk.co.irokottaki.moneycontrol"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.language", "java"
        property "sonar.sources", "src/main/java"
        property "sonar.login", "admin"
        property "sonar.password", "admin"
        property "sonar.profile", "Sonar way"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.test", "./src/android/java, ./src/test/java"
        property "sonar.dynamicAnalysis", "reuseReports"

        property "sonar.junit.reportsPath", "build/reports/coverage/debug"
        property "sonar.coverage.exclusions",   "**/src/main/java/uk/co/irokottaki/moneycontrol/AlarmReceiver*," +
                "**/src/main/java/uk/co/irokottaki/moneycontrol/utils/ReminderJobService*," +
                "**/src/main/java/uk/co/irokottaki/moneycontrol/inappbilling/*"

        property "sonar.jacoco.reportPath", fileTree(dir: project.projectDir, includes: ['**/*.exec'])
        property "sonar.java.test.binaries", "${project.buildDir}/intermediates/app_classes/debug"
        property "sonar.jacoco.itReportPath", fileTree(dir: project.projectDir, includes: ['**/*.ec'])
        property "sonar.java.test.libraries", libraries
        property "sonar.android.lint.report", "./build/outputs/lint-results.xml"
        property "sonar.libraries", libraries
        property "sonar.java.libraries", libraries
        property "sonar.import_unknown_files", true
        property "sonar.scm.disabled", true
    }
}
apply plugin: 'jacoco'
jacoco {
    toolVersion "0.7.6.201602180812"
}
// run ./gradlew clean createDebugCoverageReport jacocoTestReport
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      'android/**/*.*',
                      '**/Lambda$*.class', //Retrolambda
                      '**/Lambda.class',
                      '**/*Lambda.class',
                      '**/*Lambda*.class',
                      '**/*Lambda*.*',
                      '**/*Builder.*',
                      '**/*_MembersInjector.class', //Dagger2 generated code
                      '**/*_MembersInjector*.*', //Dagger2 generated code
                      '**/*_*Factory*.*', //Dagger2 generated code
                      '**/*Component*.*', //Dagger2 generated code
                      '**/*Module*.*' //Dagger2 generated code
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec’ , ‘**/*.ec'])
}
task wrapper( type: Wrapper ) {
    gradleVersion = '2.13'
}